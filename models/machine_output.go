package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MachineOutput Machine Output
// swagger:model machine-output
type MachineOutput struct {
	MachineInput

	// errors
	Errors []string `json:"Errors"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MachineOutput) UnmarshalJSON(raw []byte) error {

	var aO0 MachineInput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MachineInput = aO0

	var data struct {
		Errors []string `json:"Errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Errors = data.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MachineOutput) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.MachineInput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var data struct {
		Errors []string `json:"Errors,omitempty"`
	}

	data.Errors = m.Errors

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this machine output
func (m *MachineOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.MachineInput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineOutput) validateErrors(formats strfmt.Registry) error {

	return nil
}
