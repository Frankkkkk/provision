package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/rackn/rocket-skates/models"
	"github.com/rackn/rocket-skates/restapi/operations/bootenvs"
	"github.com/rackn/rocket-skates/restapi/operations/dhcp_leases"
	"github.com/rackn/rocket-skates/restapi/operations/dhcp_reservations"
	"github.com/rackn/rocket-skates/restapi/operations/dhcp_subnets"
	"github.com/rackn/rocket-skates/restapi/operations/files"
	"github.com/rackn/rocket-skates/restapi/operations/isos"
	"github.com/rackn/rocket-skates/restapi/operations/machines"
	"github.com/rackn/rocket-skates/restapi/operations/templates"
)

// NewRocketSkatesAPI creates a new RocketSkates instance
func NewRocketSkatesAPI(spec *loads.Document) *RocketSkatesAPI {
	return &RocketSkatesAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
		ServeError:      errors.ServeError,
		JSONConsumer:    runtime.JSONConsumer(),
		BinConsumer:     runtime.ByteStreamConsumer(),
		JSONProducer:    runtime.JSONProducer(),
		BinProducer:     runtime.ByteStreamProducer(),
		DhcpReservationsDELETEDhcpReservationHandler: dhcp_reservations.DELETEDhcpReservationHandlerFunc(func(params dhcp_reservations.DELETEDhcpReservationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpReservationsDELETEDhcpReservation has not yet been implemented")
		}),
		DhcpSubnetsDELETEDhcpSubnetHandler: dhcp_subnets.DELETEDhcpSubnetHandlerFunc(func(params dhcp_subnets.DELETEDhcpSubnetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpSubnetsDELETEDhcpSubnet has not yet been implemented")
		}),
		DhcpReservationsGETDhcpReservationHandler: dhcp_reservations.GETDhcpReservationHandlerFunc(func(params dhcp_reservations.GETDhcpReservationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpReservationsGETDhcpReservation has not yet been implemented")
		}),
		DhcpSubnetsGETDhcpSubnetHandler: dhcp_subnets.GETDhcpSubnetHandlerFunc(func(params dhcp_subnets.GETDhcpSubnetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpSubnetsGETDhcpSubnet has not yet been implemented")
		}),
		DhcpReservationsLISTDhcpReservationsHandler: dhcp_reservations.LISTDhcpReservationsHandlerFunc(func(params dhcp_reservations.LISTDhcpReservationsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpReservationsLISTDhcpReservations has not yet been implemented")
		}),
		DhcpSubnetsLISTDhcpSubnetsHandler: dhcp_subnets.LISTDhcpSubnetsHandlerFunc(func(params dhcp_subnets.LISTDhcpSubnetsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpSubnetsLISTDhcpSubnets has not yet been implemented")
		}),
		DhcpReservationsPOSTDhcpReservationHandler: dhcp_reservations.POSTDhcpReservationHandlerFunc(func(params dhcp_reservations.POSTDhcpReservationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpReservationsPOSTDhcpReservation has not yet been implemented")
		}),
		DhcpSubnetsPOSTDhcpSubnetHandler: dhcp_subnets.POSTDhcpSubnetHandlerFunc(func(params dhcp_subnets.POSTDhcpSubnetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpSubnetsPOSTDhcpSubnet has not yet been implemented")
		}),
		DhcpReservationsPUTDhcpReservationHandler: dhcp_reservations.PUTDhcpReservationHandlerFunc(func(params dhcp_reservations.PUTDhcpReservationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpReservationsPUTDhcpReservation has not yet been implemented")
		}),
		DhcpSubnetsPUTDhcpSubnetHandler: dhcp_subnets.PUTDhcpSubnetHandlerFunc(func(params dhcp_subnets.PUTDhcpSubnetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpSubnetsPUTDhcpSubnet has not yet been implemented")
		}),
		BootenvsDeleteBootenvHandler: bootenvs.DeleteBootenvHandlerFunc(func(params bootenvs.DeleteBootenvParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsDeleteBootenv has not yet been implemented")
		}),
		DhcpLeasesDeleteDhcpLeaseHandler: dhcp_leases.DeleteDhcpLeaseHandlerFunc(func(params dhcp_leases.DeleteDhcpLeaseParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpLeasesDeleteDhcpLease has not yet been implemented")
		}),
		FilesDeleteFileHandler: files.DeleteFileHandlerFunc(func(params files.DeleteFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FilesDeleteFile has not yet been implemented")
		}),
		IsosDeleteIsoHandler: isos.DeleteIsoHandlerFunc(func(params isos.DeleteIsoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation IsosDeleteIso has not yet been implemented")
		}),
		MachinesDeleteMachineHandler: machines.DeleteMachineHandlerFunc(func(params machines.DeleteMachineParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesDeleteMachine has not yet been implemented")
		}),
		TemplatesDeleteTemplateHandler: templates.DeleteTemplateHandlerFunc(func(params templates.DeleteTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesDeleteTemplate has not yet been implemented")
		}),
		BootenvsGetBootenvHandler: bootenvs.GetBootenvHandlerFunc(func(params bootenvs.GetBootenvParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsGetBootenv has not yet been implemented")
		}),
		DhcpLeasesGetDhcpLeaseHandler: dhcp_leases.GetDhcpLeaseHandlerFunc(func(params dhcp_leases.GetDhcpLeaseParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpLeasesGetDhcpLease has not yet been implemented")
		}),
		FilesGetFileHandler: files.GetFileHandlerFunc(func(params files.GetFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FilesGetFile has not yet been implemented")
		}),
		IsosGetIsoHandler: isos.GetIsoHandlerFunc(func(params isos.GetIsoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation IsosGetIso has not yet been implemented")
		}),
		MachinesGetMachineHandler: machines.GetMachineHandlerFunc(func(params machines.GetMachineParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesGetMachine has not yet been implemented")
		}),
		TemplatesGetTemplateHandler: templates.GetTemplateHandlerFunc(func(params templates.GetTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesGetTemplate has not yet been implemented")
		}),
		BootenvsListBootenvsHandler: bootenvs.ListBootenvsHandlerFunc(func(params bootenvs.ListBootenvsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsListBootenvs has not yet been implemented")
		}),
		DhcpLeasesListDhcpLeasesHandler: dhcp_leases.ListDhcpLeasesHandlerFunc(func(params dhcp_leases.ListDhcpLeasesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpLeasesListDhcpLeases has not yet been implemented")
		}),
		FilesListFilesHandler: files.ListFilesHandlerFunc(func(params files.ListFilesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FilesListFiles has not yet been implemented")
		}),
		IsosListIsosHandler: isos.ListIsosHandlerFunc(func(params isos.ListIsosParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation IsosListIsos has not yet been implemented")
		}),
		MachinesListMachinesHandler: machines.ListMachinesHandlerFunc(func(params machines.ListMachinesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesListMachines has not yet been implemented")
		}),
		TemplatesListTemplatesHandler: templates.ListTemplatesHandlerFunc(func(params templates.ListTemplatesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesListTemplates has not yet been implemented")
		}),
		BootenvsPatchBootenvHandler: bootenvs.PatchBootenvHandlerFunc(func(params bootenvs.PatchBootenvParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsPatchBootenv has not yet been implemented")
		}),
		MachinesPatchMachineHandler: machines.PatchMachineHandlerFunc(func(params machines.PatchMachineParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesPatchMachine has not yet been implemented")
		}),
		TemplatesPatchTemplateHandler: templates.PatchTemplateHandlerFunc(func(params templates.PatchTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesPatchTemplate has not yet been implemented")
		}),
		BootenvsPostBootenvHandler: bootenvs.PostBootenvHandlerFunc(func(params bootenvs.PostBootenvParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsPostBootenv has not yet been implemented")
		}),
		DhcpLeasesPostDhcpLeaseHandler: dhcp_leases.PostDhcpLeaseHandlerFunc(func(params dhcp_leases.PostDhcpLeaseParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpLeasesPostDhcpLease has not yet been implemented")
		}),
		FilesPostFileHandler: files.PostFileHandlerFunc(func(params files.PostFileParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation FilesPostFile has not yet been implemented")
		}),
		IsosPostIsoHandler: isos.PostIsoHandlerFunc(func(params isos.PostIsoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation IsosPostIso has not yet been implemented")
		}),
		MachinesPostMachineHandler: machines.PostMachineHandlerFunc(func(params machines.PostMachineParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesPostMachine has not yet been implemented")
		}),
		TemplatesPostTemplateHandler: templates.PostTemplateHandlerFunc(func(params templates.PostTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesPostTemplate has not yet been implemented")
		}),
		BootenvsPutBootenvHandler: bootenvs.PutBootenvHandlerFunc(func(params bootenvs.PutBootenvParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation BootenvsPutBootenv has not yet been implemented")
		}),
		DhcpLeasesPutDhcpLeaseHandler: dhcp_leases.PutDhcpLeaseHandlerFunc(func(params dhcp_leases.PutDhcpLeaseParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DhcpLeasesPutDhcpLease has not yet been implemented")
		}),
		MachinesPutMachineHandler: machines.PutMachineHandlerFunc(func(params machines.PutMachineParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MachinesPutMachine has not yet been implemented")
		}),
		TemplatesPutTemplateHandler: templates.PutTemplateHandlerFunc(func(params templates.PutTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesPutTemplate has not yet been implemented")
		}),
		TemplatesReplaceTemplateHandler: templates.ReplaceTemplateHandlerFunc(func(params templates.ReplaceTemplateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation TemplatesReplaceTemplate has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		RebarAuth: func(user string, pass string) (*models.Principal, error) {
			return nil, errors.NotImplemented("basic auth  (rebar) has not yet been implemented")
		},

		// Applies when the "Authorization" header is set
		AuthorizationAuth: func(token string) (*models.Principal, error) {
			return nil, errors.NotImplemented("api key auth (Authorization) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "auth_token" query is set
		AuthTokenAuth: func(token string) (*models.Principal, error) {
			return nil, errors.NotImplemented("api key auth (auth_token) auth_token from query param [auth_token] has not yet been implemented")
		},
	}
}

/*RocketSkatesAPI Protocol for Bare Metal Provider */
type RocketSkatesAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer

	// RebarAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	RebarAuth func(string, string) (*models.Principal, error)

	// AuthorizationAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	AuthorizationAuth func(string) (*models.Principal, error)

	// AuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key auth_token provided in the query
	AuthTokenAuth func(string) (*models.Principal, error)

	// DhcpReservationsDELETEDhcpReservationHandler sets the operation handler for the d e l e t e dhcp reservation operation
	DhcpReservationsDELETEDhcpReservationHandler dhcp_reservations.DELETEDhcpReservationHandler
	// DhcpSubnetsDELETEDhcpSubnetHandler sets the operation handler for the d e l e t e dhcp subnet operation
	DhcpSubnetsDELETEDhcpSubnetHandler dhcp_subnets.DELETEDhcpSubnetHandler
	// DhcpReservationsGETDhcpReservationHandler sets the operation handler for the g e t dhcp reservation operation
	DhcpReservationsGETDhcpReservationHandler dhcp_reservations.GETDhcpReservationHandler
	// DhcpSubnetsGETDhcpSubnetHandler sets the operation handler for the g e t dhcp subnet operation
	DhcpSubnetsGETDhcpSubnetHandler dhcp_subnets.GETDhcpSubnetHandler
	// DhcpReservationsLISTDhcpReservationsHandler sets the operation handler for the l i s t dhcp reservations operation
	DhcpReservationsLISTDhcpReservationsHandler dhcp_reservations.LISTDhcpReservationsHandler
	// DhcpSubnetsLISTDhcpSubnetsHandler sets the operation handler for the l i s t dhcp subnets operation
	DhcpSubnetsLISTDhcpSubnetsHandler dhcp_subnets.LISTDhcpSubnetsHandler
	// DhcpReservationsPOSTDhcpReservationHandler sets the operation handler for the p o s t dhcp reservation operation
	DhcpReservationsPOSTDhcpReservationHandler dhcp_reservations.POSTDhcpReservationHandler
	// DhcpSubnetsPOSTDhcpSubnetHandler sets the operation handler for the p o s t dhcp subnet operation
	DhcpSubnetsPOSTDhcpSubnetHandler dhcp_subnets.POSTDhcpSubnetHandler
	// DhcpReservationsPUTDhcpReservationHandler sets the operation handler for the p u t dhcp reservation operation
	DhcpReservationsPUTDhcpReservationHandler dhcp_reservations.PUTDhcpReservationHandler
	// DhcpSubnetsPUTDhcpSubnetHandler sets the operation handler for the p u t dhcp subnet operation
	DhcpSubnetsPUTDhcpSubnetHandler dhcp_subnets.PUTDhcpSubnetHandler
	// BootenvsDeleteBootenvHandler sets the operation handler for the delete bootenv operation
	BootenvsDeleteBootenvHandler bootenvs.DeleteBootenvHandler
	// DhcpLeasesDeleteDhcpLeaseHandler sets the operation handler for the delete dhcp lease operation
	DhcpLeasesDeleteDhcpLeaseHandler dhcp_leases.DeleteDhcpLeaseHandler
	// FilesDeleteFileHandler sets the operation handler for the delete file operation
	FilesDeleteFileHandler files.DeleteFileHandler
	// IsosDeleteIsoHandler sets the operation handler for the delete iso operation
	IsosDeleteIsoHandler isos.DeleteIsoHandler
	// MachinesDeleteMachineHandler sets the operation handler for the delete machine operation
	MachinesDeleteMachineHandler machines.DeleteMachineHandler
	// TemplatesDeleteTemplateHandler sets the operation handler for the delete template operation
	TemplatesDeleteTemplateHandler templates.DeleteTemplateHandler
	// BootenvsGetBootenvHandler sets the operation handler for the get bootenv operation
	BootenvsGetBootenvHandler bootenvs.GetBootenvHandler
	// DhcpLeasesGetDhcpLeaseHandler sets the operation handler for the get dhcp lease operation
	DhcpLeasesGetDhcpLeaseHandler dhcp_leases.GetDhcpLeaseHandler
	// FilesGetFileHandler sets the operation handler for the get file operation
	FilesGetFileHandler files.GetFileHandler
	// IsosGetIsoHandler sets the operation handler for the get iso operation
	IsosGetIsoHandler isos.GetIsoHandler
	// MachinesGetMachineHandler sets the operation handler for the get machine operation
	MachinesGetMachineHandler machines.GetMachineHandler
	// TemplatesGetTemplateHandler sets the operation handler for the get template operation
	TemplatesGetTemplateHandler templates.GetTemplateHandler
	// BootenvsListBootenvsHandler sets the operation handler for the list bootenvs operation
	BootenvsListBootenvsHandler bootenvs.ListBootenvsHandler
	// DhcpLeasesListDhcpLeasesHandler sets the operation handler for the list dhcp leases operation
	DhcpLeasesListDhcpLeasesHandler dhcp_leases.ListDhcpLeasesHandler
	// FilesListFilesHandler sets the operation handler for the list files operation
	FilesListFilesHandler files.ListFilesHandler
	// IsosListIsosHandler sets the operation handler for the list isos operation
	IsosListIsosHandler isos.ListIsosHandler
	// MachinesListMachinesHandler sets the operation handler for the list machines operation
	MachinesListMachinesHandler machines.ListMachinesHandler
	// TemplatesListTemplatesHandler sets the operation handler for the list templates operation
	TemplatesListTemplatesHandler templates.ListTemplatesHandler
	// BootenvsPatchBootenvHandler sets the operation handler for the patch bootenv operation
	BootenvsPatchBootenvHandler bootenvs.PatchBootenvHandler
	// MachinesPatchMachineHandler sets the operation handler for the patch machine operation
	MachinesPatchMachineHandler machines.PatchMachineHandler
	// TemplatesPatchTemplateHandler sets the operation handler for the patch template operation
	TemplatesPatchTemplateHandler templates.PatchTemplateHandler
	// BootenvsPostBootenvHandler sets the operation handler for the post bootenv operation
	BootenvsPostBootenvHandler bootenvs.PostBootenvHandler
	// DhcpLeasesPostDhcpLeaseHandler sets the operation handler for the post dhcp lease operation
	DhcpLeasesPostDhcpLeaseHandler dhcp_leases.PostDhcpLeaseHandler
	// FilesPostFileHandler sets the operation handler for the post file operation
	FilesPostFileHandler files.PostFileHandler
	// IsosPostIsoHandler sets the operation handler for the post iso operation
	IsosPostIsoHandler isos.PostIsoHandler
	// MachinesPostMachineHandler sets the operation handler for the post machine operation
	MachinesPostMachineHandler machines.PostMachineHandler
	// TemplatesPostTemplateHandler sets the operation handler for the post template operation
	TemplatesPostTemplateHandler templates.PostTemplateHandler
	// BootenvsPutBootenvHandler sets the operation handler for the put bootenv operation
	BootenvsPutBootenvHandler bootenvs.PutBootenvHandler
	// DhcpLeasesPutDhcpLeaseHandler sets the operation handler for the put dhcp lease operation
	DhcpLeasesPutDhcpLeaseHandler dhcp_leases.PutDhcpLeaseHandler
	// MachinesPutMachineHandler sets the operation handler for the put machine operation
	MachinesPutMachineHandler machines.PutMachineHandler
	// TemplatesPutTemplateHandler sets the operation handler for the put template operation
	TemplatesPutTemplateHandler templates.PutTemplateHandler
	// TemplatesReplaceTemplateHandler sets the operation handler for the replace template operation
	TemplatesReplaceTemplateHandler templates.ReplaceTemplateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RocketSkatesAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RocketSkatesAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RocketSkatesAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RocketSkatesAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RocketSkatesAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RocketSkatesAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RocketSkatesAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RocketSkatesAPI
func (o *RocketSkatesAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.RebarAuth == nil {
		unregistered = append(unregistered, "RebarAuth")
	}

	if o.AuthorizationAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.AuthTokenAuth == nil {
		unregistered = append(unregistered, "AuthTokenAuth")
	}

	if o.DhcpReservationsDELETEDhcpReservationHandler == nil {
		unregistered = append(unregistered, "dhcp_reservations.DELETEDhcpReservationHandler")
	}

	if o.DhcpSubnetsDELETEDhcpSubnetHandler == nil {
		unregistered = append(unregistered, "dhcp_subnets.DELETEDhcpSubnetHandler")
	}

	if o.DhcpReservationsGETDhcpReservationHandler == nil {
		unregistered = append(unregistered, "dhcp_reservations.GETDhcpReservationHandler")
	}

	if o.DhcpSubnetsGETDhcpSubnetHandler == nil {
		unregistered = append(unregistered, "dhcp_subnets.GETDhcpSubnetHandler")
	}

	if o.DhcpReservationsLISTDhcpReservationsHandler == nil {
		unregistered = append(unregistered, "dhcp_reservations.LISTDhcpReservationsHandler")
	}

	if o.DhcpSubnetsLISTDhcpSubnetsHandler == nil {
		unregistered = append(unregistered, "dhcp_subnets.LISTDhcpSubnetsHandler")
	}

	if o.DhcpReservationsPOSTDhcpReservationHandler == nil {
		unregistered = append(unregistered, "dhcp_reservations.POSTDhcpReservationHandler")
	}

	if o.DhcpSubnetsPOSTDhcpSubnetHandler == nil {
		unregistered = append(unregistered, "dhcp_subnets.POSTDhcpSubnetHandler")
	}

	if o.DhcpReservationsPUTDhcpReservationHandler == nil {
		unregistered = append(unregistered, "dhcp_reservations.PUTDhcpReservationHandler")
	}

	if o.DhcpSubnetsPUTDhcpSubnetHandler == nil {
		unregistered = append(unregistered, "dhcp_subnets.PUTDhcpSubnetHandler")
	}

	if o.BootenvsDeleteBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.DeleteBootenvHandler")
	}

	if o.DhcpLeasesDeleteDhcpLeaseHandler == nil {
		unregistered = append(unregistered, "dhcp_leases.DeleteDhcpLeaseHandler")
	}

	if o.FilesDeleteFileHandler == nil {
		unregistered = append(unregistered, "files.DeleteFileHandler")
	}

	if o.IsosDeleteIsoHandler == nil {
		unregistered = append(unregistered, "isos.DeleteIsoHandler")
	}

	if o.MachinesDeleteMachineHandler == nil {
		unregistered = append(unregistered, "machines.DeleteMachineHandler")
	}

	if o.TemplatesDeleteTemplateHandler == nil {
		unregistered = append(unregistered, "templates.DeleteTemplateHandler")
	}

	if o.BootenvsGetBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.GetBootenvHandler")
	}

	if o.DhcpLeasesGetDhcpLeaseHandler == nil {
		unregistered = append(unregistered, "dhcp_leases.GetDhcpLeaseHandler")
	}

	if o.FilesGetFileHandler == nil {
		unregistered = append(unregistered, "files.GetFileHandler")
	}

	if o.IsosGetIsoHandler == nil {
		unregistered = append(unregistered, "isos.GetIsoHandler")
	}

	if o.MachinesGetMachineHandler == nil {
		unregistered = append(unregistered, "machines.GetMachineHandler")
	}

	if o.TemplatesGetTemplateHandler == nil {
		unregistered = append(unregistered, "templates.GetTemplateHandler")
	}

	if o.BootenvsListBootenvsHandler == nil {
		unregistered = append(unregistered, "bootenvs.ListBootenvsHandler")
	}

	if o.DhcpLeasesListDhcpLeasesHandler == nil {
		unregistered = append(unregistered, "dhcp_leases.ListDhcpLeasesHandler")
	}

	if o.FilesListFilesHandler == nil {
		unregistered = append(unregistered, "files.ListFilesHandler")
	}

	if o.IsosListIsosHandler == nil {
		unregistered = append(unregistered, "isos.ListIsosHandler")
	}

	if o.MachinesListMachinesHandler == nil {
		unregistered = append(unregistered, "machines.ListMachinesHandler")
	}

	if o.TemplatesListTemplatesHandler == nil {
		unregistered = append(unregistered, "templates.ListTemplatesHandler")
	}

	if o.BootenvsPatchBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PatchBootenvHandler")
	}

	if o.MachinesPatchMachineHandler == nil {
		unregistered = append(unregistered, "machines.PatchMachineHandler")
	}

	if o.TemplatesPatchTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PatchTemplateHandler")
	}

	if o.BootenvsPostBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PostBootenvHandler")
	}

	if o.DhcpLeasesPostDhcpLeaseHandler == nil {
		unregistered = append(unregistered, "dhcp_leases.PostDhcpLeaseHandler")
	}

	if o.FilesPostFileHandler == nil {
		unregistered = append(unregistered, "files.PostFileHandler")
	}

	if o.IsosPostIsoHandler == nil {
		unregistered = append(unregistered, "isos.PostIsoHandler")
	}

	if o.MachinesPostMachineHandler == nil {
		unregistered = append(unregistered, "machines.PostMachineHandler")
	}

	if o.TemplatesPostTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PostTemplateHandler")
	}

	if o.BootenvsPutBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PutBootenvHandler")
	}

	if o.DhcpLeasesPutDhcpLeaseHandler == nil {
		unregistered = append(unregistered, "dhcp_leases.PutDhcpLeaseHandler")
	}

	if o.MachinesPutMachineHandler == nil {
		unregistered = append(unregistered, "machines.PutMachineHandler")
	}

	if o.TemplatesPutTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PutTemplateHandler")
	}

	if o.TemplatesReplaceTemplateHandler == nil {
		unregistered = append(unregistered, "templates.ReplaceTemplateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RocketSkatesAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RocketSkatesAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "rebar":
			_ = scheme
			result[name] = security.BasicAuth(func(username, password string) (interface{}, error) {
				return o.RebarAuth(username, password)
			})

		case "Authorization":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.AuthorizationAuth(token)
			})

		case "auth_token":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.AuthTokenAuth(token)
			})

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (o *RocketSkatesAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RocketSkatesAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RocketSkatesAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the rocket skates API
func (o *RocketSkatesAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RocketSkatesAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/reservations/{id}"] = dhcp_reservations.NewDELETEDhcpReservation(o.context, o.DhcpReservationsDELETEDhcpReservationHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subnets/{id}"] = dhcp_subnets.NewDELETEDhcpSubnet(o.context, o.DhcpSubnetsDELETEDhcpSubnetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reservations/{id}"] = dhcp_reservations.NewGETDhcpReservation(o.context, o.DhcpReservationsGETDhcpReservationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnets/{id}"] = dhcp_subnets.NewGETDhcpSubnet(o.context, o.DhcpSubnetsGETDhcpSubnetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reservations"] = dhcp_reservations.NewLISTDhcpReservations(o.context, o.DhcpReservationsLISTDhcpReservationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnets"] = dhcp_subnets.NewLISTDhcpSubnets(o.context, o.DhcpSubnetsLISTDhcpSubnetsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reservations"] = dhcp_reservations.NewPOSTDhcpReservation(o.context, o.DhcpReservationsPOSTDhcpReservationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subnets"] = dhcp_subnets.NewPOSTDhcpSubnet(o.context, o.DhcpSubnetsPOSTDhcpSubnetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/reservations/{id}"] = dhcp_reservations.NewPUTDhcpReservation(o.context, o.DhcpReservationsPUTDhcpReservationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/subnets/{id}"] = dhcp_subnets.NewPUTDhcpSubnet(o.context, o.DhcpSubnetsPUTDhcpSubnetHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/bootenvs/{name}"] = bootenvs.NewDeleteBootenv(o.context, o.BootenvsDeleteBootenvHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/leases/{id}"] = dhcp_leases.NewDeleteDhcpLease(o.context, o.DhcpLeasesDeleteDhcpLeaseHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/files/{path}"] = files.NewDeleteFile(o.context, o.FilesDeleteFileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/isos/{name}"] = isos.NewDeleteIso(o.context, o.IsosDeleteIsoHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/machines/{uuid}"] = machines.NewDeleteMachine(o.context, o.MachinesDeleteMachineHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/templates/{uuid}"] = templates.NewDeleteTemplate(o.context, o.TemplatesDeleteTemplateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bootenvs/{name}"] = bootenvs.NewGetBootenv(o.context, o.BootenvsGetBootenvHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/leases/{id}"] = dhcp_leases.NewGetDhcpLease(o.context, o.DhcpLeasesGetDhcpLeaseHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{path}"] = files.NewGetFile(o.context, o.FilesGetFileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/isos/{name}"] = isos.NewGetIso(o.context, o.IsosGetIsoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/machines/{uuid}"] = machines.NewGetMachine(o.context, o.MachinesGetMachineHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/{uuid}"] = templates.NewGetTemplate(o.context, o.TemplatesGetTemplateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bootenvs"] = bootenvs.NewListBootenvs(o.context, o.BootenvsListBootenvsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/leases"] = dhcp_leases.NewListDhcpLeases(o.context, o.DhcpLeasesListDhcpLeasesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files"] = files.NewListFiles(o.context, o.FilesListFilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/isos"] = isos.NewListIsos(o.context, o.IsosListIsosHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/machines"] = machines.NewListMachines(o.context, o.MachinesListMachinesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates"] = templates.NewListTemplates(o.context, o.TemplatesListTemplatesHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/bootenvs/{name}"] = bootenvs.NewPatchBootenv(o.context, o.BootenvsPatchBootenvHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/machines/{uuid}"] = machines.NewPatchMachine(o.context, o.MachinesPatchMachineHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/template/{uuid}"] = templates.NewPatchTemplate(o.context, o.TemplatesPatchTemplateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/bootenv"] = bootenvs.NewPostBootenv(o.context, o.BootenvsPostBootenvHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/leases"] = dhcp_leases.NewPostDhcpLease(o.context, o.DhcpLeasesPostDhcpLeaseHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/{path}"] = files.NewPostFile(o.context, o.FilesPostFileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/isos/{name}"] = isos.NewPostIso(o.context, o.IsosPostIsoHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/machines"] = machines.NewPostMachine(o.context, o.MachinesPostMachineHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/templates"] = templates.NewPostTemplate(o.context, o.TemplatesPostTemplateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/bootenvs/{name}"] = bootenvs.NewPutBootenv(o.context, o.BootenvsPutBootenvHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/leases/{id}"] = dhcp_leases.NewPutDhcpLease(o.context, o.DhcpLeasesPutDhcpLeaseHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/machines/{uuid}"] = machines.NewPutMachine(o.context, o.MachinesPutMachineHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/templates/{uuid}"] = templates.NewPutTemplate(o.context, o.TemplatesPutTemplateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/templates/{uuid}"] = templates.NewReplaceTemplate(o.context, o.TemplatesReplaceTemplateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RocketSkatesAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *RocketSkatesAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
