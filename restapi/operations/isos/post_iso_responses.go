package isos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/rackn/rocket-skates/models"
)

// HTTP code for type PostIsoCreated
const PostIsoCreatedCode int = 201

/*PostIsoCreated post iso created

swagger:response postIsoCreated
*/
type PostIsoCreated struct {

	/*
	  In: Body
	*/
	Payload PostIsoCreatedBody `json:"body,omitempty"`
}

// NewPostIsoCreated creates PostIsoCreated with default headers values
func NewPostIsoCreated() *PostIsoCreated {
	return &PostIsoCreated{}
}

// WithPayload adds the payload to the post iso created response
func (o *PostIsoCreated) WithPayload(payload PostIsoCreatedBody) *PostIsoCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso created response
func (o *PostIsoCreated) SetPayload(payload PostIsoCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// HTTP code for type PostIsoBadRequest
const PostIsoBadRequestCode int = 400

/*PostIsoBadRequest post iso bad request

swagger:response postIsoBadRequest
*/
type PostIsoBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostIsoBadRequest creates PostIsoBadRequest with default headers values
func NewPostIsoBadRequest() *PostIsoBadRequest {
	return &PostIsoBadRequest{}
}

// WithPayload adds the payload to the post iso bad request response
func (o *PostIsoBadRequest) WithPayload(payload *models.Error) *PostIsoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso bad request response
func (o *PostIsoBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PostIsoUnauthorized
const PostIsoUnauthorizedCode int = 401

/*PostIsoUnauthorized post iso unauthorized

swagger:response postIsoUnauthorized
*/
type PostIsoUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostIsoUnauthorized creates PostIsoUnauthorized with default headers values
func NewPostIsoUnauthorized() *PostIsoUnauthorized {
	return &PostIsoUnauthorized{}
}

// WithPayload adds the payload to the post iso unauthorized response
func (o *PostIsoUnauthorized) WithPayload(payload *models.Error) *PostIsoUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso unauthorized response
func (o *PostIsoUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PostIsoConflict
const PostIsoConflictCode int = 409

/*PostIsoConflict post iso conflict

swagger:response postIsoConflict
*/
type PostIsoConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostIsoConflict creates PostIsoConflict with default headers values
func NewPostIsoConflict() *PostIsoConflict {
	return &PostIsoConflict{}
}

// WithPayload adds the payload to the post iso conflict response
func (o *PostIsoConflict) WithPayload(payload *models.Error) *PostIsoConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso conflict response
func (o *PostIsoConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PostIsoInternalServerError
const PostIsoInternalServerErrorCode int = 500

/*PostIsoInternalServerError post iso internal server error

swagger:response postIsoInternalServerError
*/
type PostIsoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostIsoInternalServerError creates PostIsoInternalServerError with default headers values
func NewPostIsoInternalServerError() *PostIsoInternalServerError {
	return &PostIsoInternalServerError{}
}

// WithPayload adds the payload to the post iso internal server error response
func (o *PostIsoInternalServerError) WithPayload(payload *models.Error) *PostIsoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso internal server error response
func (o *PostIsoInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PostIsoInsufficientStorage
const PostIsoInsufficientStorageCode int = 507

/*PostIsoInsufficientStorage post iso insufficient storage

swagger:response postIsoInsufficientStorage
*/
type PostIsoInsufficientStorage struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostIsoInsufficientStorage creates PostIsoInsufficientStorage with default headers values
func NewPostIsoInsufficientStorage() *PostIsoInsufficientStorage {
	return &PostIsoInsufficientStorage{}
}

// WithPayload adds the payload to the post iso insufficient storage response
func (o *PostIsoInsufficientStorage) WithPayload(payload *models.Error) *PostIsoInsufficientStorage {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post iso insufficient storage response
func (o *PostIsoInsufficientStorage) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostIsoInsufficientStorage) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(507)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
