package isos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	validate "github.com/go-openapi/validate"

	"github.com/rackn/rocket-skates/models"
)

// PostIsoHandlerFunc turns a function with the right signature into a post iso handler
type PostIsoHandlerFunc func(PostIsoParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostIsoHandlerFunc) Handle(params PostIsoParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostIsoHandler interface for that can handle valid post iso params
type PostIsoHandler interface {
	Handle(PostIsoParams, *models.Principal) middleware.Responder
}

// NewPostIso creates a new http.Handler for the post iso operation
func NewPostIso(ctx *middleware.Context, handler PostIsoHandler) *PostIso {
	return &PostIso{Context: ctx, Handler: handler}
}

/*PostIso swagger:route POST /isos/{name} Isos postIso

Create Iso

*/
type PostIso struct {
	Context *middleware.Context
	Handler PostIsoHandler
}

func (o *PostIso) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostIsoParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostIsoCreatedBody post iso created body
// swagger:model PostIsoCreatedBody
type PostIsoCreatedBody struct {

	// name
	// Required: true
	Name *string `json:"Name"`

	// size
	// Required: true
	Size *int64 `json:"Size"`
}

// Validate validates this post iso created body
func (o *PostIsoCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostIsoCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("postIsoCreated"+"."+"Name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostIsoCreatedBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("postIsoCreated"+"."+"Size", "body", o.Size); err != nil {
		return err
	}

	return nil
}
