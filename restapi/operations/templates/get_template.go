package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/rackn/rocket-skates/models"
)

// GetTemplateHandlerFunc turns a function with the right signature into a get template handler
type GetTemplateHandlerFunc func(GetTemplateParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTemplateHandlerFunc) Handle(params GetTemplateParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetTemplateHandler interface for that can handle valid get template params
type GetTemplateHandler interface {
	Handle(GetTemplateParams, *models.Principal) middleware.Responder
}

// NewGetTemplate creates a new http.Handler for the get template operation
func NewGetTemplate(ctx *middleware.Context, handler GetTemplateHandler) *GetTemplate {
	return &GetTemplate{Context: ctx, Handler: handler}
}

/*GetTemplate swagger:route GET /templates/{uuid} Templates getTemplate

Get Template

*/
type GetTemplate struct {
	Context *middleware.Context
	Handler GetTemplateHandler
}

func (o *GetTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetTemplateParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
