package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/rackn/rocket-skates/models"
)

// HTTP code for type PatchMachineOK
const PatchMachineOKCode int = 200

/*PatchMachineOK patch machine o k

swagger:response patchMachineOK
*/
type PatchMachineOK struct {

	/*
	  In: Body
	*/
	Payload *models.MachineOutput `json:"body,omitempty"`
}

// NewPatchMachineOK creates PatchMachineOK with default headers values
func NewPatchMachineOK() *PatchMachineOK {
	return &PatchMachineOK{}
}

// WithPayload adds the payload to the patch machine o k response
func (o *PatchMachineOK) WithPayload(payload *models.MachineOutput) *PatchMachineOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine o k response
func (o *PatchMachineOK) SetPayload(payload *models.MachineOutput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PatchMachineUnauthorized
const PatchMachineUnauthorizedCode int = 401

/*PatchMachineUnauthorized patch machine unauthorized

swagger:response patchMachineUnauthorized
*/
type PatchMachineUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMachineUnauthorized creates PatchMachineUnauthorized with default headers values
func NewPatchMachineUnauthorized() *PatchMachineUnauthorized {
	return &PatchMachineUnauthorized{}
}

// WithPayload adds the payload to the patch machine unauthorized response
func (o *PatchMachineUnauthorized) WithPayload(payload *models.Error) *PatchMachineUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine unauthorized response
func (o *PatchMachineUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PatchMachineNotFound
const PatchMachineNotFoundCode int = 404

/*PatchMachineNotFound patch machine not found

swagger:response patchMachineNotFound
*/
type PatchMachineNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMachineNotFound creates PatchMachineNotFound with default headers values
func NewPatchMachineNotFound() *PatchMachineNotFound {
	return &PatchMachineNotFound{}
}

// WithPayload adds the payload to the patch machine not found response
func (o *PatchMachineNotFound) WithPayload(payload *models.Error) *PatchMachineNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine not found response
func (o *PatchMachineNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PatchMachineConflict
const PatchMachineConflictCode int = 409

/*PatchMachineConflict patch machine conflict

swagger:response patchMachineConflict
*/
type PatchMachineConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMachineConflict creates PatchMachineConflict with default headers values
func NewPatchMachineConflict() *PatchMachineConflict {
	return &PatchMachineConflict{}
}

// WithPayload adds the payload to the patch machine conflict response
func (o *PatchMachineConflict) WithPayload(payload *models.Error) *PatchMachineConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine conflict response
func (o *PatchMachineConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PatchMachineExpectationFailed
const PatchMachineExpectationFailedCode int = 417

/*PatchMachineExpectationFailed patch machine expectation failed

swagger:response patchMachineExpectationFailed
*/
type PatchMachineExpectationFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMachineExpectationFailed creates PatchMachineExpectationFailed with default headers values
func NewPatchMachineExpectationFailed() *PatchMachineExpectationFailed {
	return &PatchMachineExpectationFailed{}
}

// WithPayload adds the payload to the patch machine expectation failed response
func (o *PatchMachineExpectationFailed) WithPayload(payload *models.Error) *PatchMachineExpectationFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine expectation failed response
func (o *PatchMachineExpectationFailed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineExpectationFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(417)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type PatchMachineInternalServerError
const PatchMachineInternalServerErrorCode int = 500

/*PatchMachineInternalServerError patch machine internal server error

swagger:response patchMachineInternalServerError
*/
type PatchMachineInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchMachineInternalServerError creates PatchMachineInternalServerError with default headers values
func NewPatchMachineInternalServerError() *PatchMachineInternalServerError {
	return &PatchMachineInternalServerError{}
}

// WithPayload adds the payload to the patch machine internal server error response
func (o *PatchMachineInternalServerError) WithPayload(payload *models.Error) *PatchMachineInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch machine internal server error response
func (o *PatchMachineInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchMachineInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
