package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/rackn/rocket-skates/models"
)

// PostDhcpLeaseHandlerFunc turns a function with the right signature into a post dhcp lease handler
type PostDhcpLeaseHandlerFunc func(PostDhcpLeaseParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDhcpLeaseHandlerFunc) Handle(params PostDhcpLeaseParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostDhcpLeaseHandler interface for that can handle valid post dhcp lease params
type PostDhcpLeaseHandler interface {
	Handle(PostDhcpLeaseParams, *models.Principal) middleware.Responder
}

// NewPostDhcpLease creates a new http.Handler for the post dhcp lease operation
func NewPostDhcpLease(ctx *middleware.Context, handler PostDhcpLeaseHandler) *PostDhcpLease {
	return &PostDhcpLease{Context: ctx, Handler: handler}
}

/*PostDhcpLease swagger:route POST /leases Dhcp leases postDhcpLease

Create DHCP Lease

*/
type PostDhcpLease struct {
	Context *middleware.Context
	Handler PostDhcpLeaseHandler
}

func (o *PostDhcpLease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostDhcpLeaseParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
